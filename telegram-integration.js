// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Web Apps
class TelegramIntegration {
    constructor() {
        this.tg = window.Telegram?.WebApp;
        this.user = null;
        
        this.init();
    }

    init() {
        if (!this.tg) {
            console.log('Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            return;
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
        this.tg.ready();
        this.tg.expand();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.user = this.tg.initDataUnsafe?.user;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        this.setupTheme();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        this.setupMainButton();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.setupEventHandlers();
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å–≤–∞–π–ø—ã (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if (this.tg.isVerticalSwipesEnabled !== undefined) {
            this.tg.disableVerticalSwipes();
        }

        console.log('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', this.user);
    }

    setupTheme() {
        if (!this.tg) return;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram
        const root = document.documentElement;
        
        if (this.tg.colorScheme === 'dark') {
            root.style.setProperty('--tg-theme-bg-color', this.tg.themeParams.bg_color || '#1e1e1e');
            root.style.setProperty('--tg-theme-secondary-bg-color', this.tg.themeParams.secondary_bg_color || '#2a2a2a');
            root.style.setProperty('--tg-theme-text-color', this.tg.themeParams.text_color || '#ffffff');
            root.style.setProperty('--tg-theme-hint-color', this.tg.themeParams.hint_color || '#6c757d');
            root.style.setProperty('--tg-theme-accent-text-color', this.tg.themeParams.accent_text_color || '#64b5ef');
            root.style.setProperty('--tg-theme-button-color', this.tg.themeParams.button_color || '#64b5ef');
            root.style.setProperty('--tg-theme-button-text-color', this.tg.themeParams.button_text_color || '#ffffff');
            root.style.setProperty('--tg-theme-destructive-text-color', this.tg.themeParams.destructive_text_color || '#ff6b6b');
        } else {
            root.style.setProperty('--tg-theme-bg-color', this.tg.themeParams.bg_color || '#ffffff');
            root.style.setProperty('--tg-theme-secondary-bg-color', this.tg.themeParams.secondary_bg_color || '#f8f9fa');
            root.style.setProperty('--tg-theme-text-color', this.tg.themeParams.text_color || '#212529');
            root.style.setProperty('--tg-theme-hint-color', this.tg.themeParams.hint_color || '#6c757d');
            root.style.setProperty('--tg-theme-accent-text-color', this.tg.themeParams.accent_text_color || '#0088cc');
            root.style.setProperty('--tg-theme-button-color', this.tg.themeParams.button_color || '#0088cc');
            root.style.setProperty('--tg-theme-button-text-color', this.tg.themeParams.button_text_color || '#ffffff');
            root.style.setProperty('--tg-theme-destructive-text-color', this.tg.themeParams.destructive_text_color || '#dc3545');
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç header bar
        if (this.tg.setHeaderColor) {
            this.tg.setHeaderColor(this.tg.themeParams.secondary_bg_color || '#ffffff');
        }
    }

    setupMainButton() {
        if (!this.tg?.MainButton) return;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –∏–≥—Ä–µ
        this.tg.MainButton.setText('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º');
        this.tg.MainButton.hide();

        this.tg.MainButton.onClick(() => {
            this.shareScore();
        });
    }

    setupEventHandlers() {
        if (!this.tg) return;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
        this.tg.onEvent('themeChanged', () => {
            this.setupTheme();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è viewport
        this.tg.onEvent('viewportChanged', () => {
            this.handleViewportChange();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.tg.onEvent('mainButtonClicked', () => {
            this.shareScore();
        });
    }

    handleViewportChange() {
        if (!this.tg) return;

        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ viewport
        const viewport = this.tg.viewportHeight;
        const stableHeight = this.tg.viewportStableHeight;
        
        // –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (viewport < stableHeight) {
            document.body.style.height = `${viewport}px`;
        } else {
            document.body.style.height = '100vh';
        }
    }

    showMainButton() {
        if (this.tg?.MainButton) {
            this.tg.MainButton.show();
        }
    }

    hideMainButton() {
        if (this.tg?.MainButton) {
            this.tg.MainButton.hide();
        }
    }

    shareScore() {
        if (!this.tg || !window.game) return;

        const score = window.game.score;
        const bestScore = window.game.bestScore;
        
        const shareText = `üéÆ –Ø –∏–≥—Ä–∞—é –≤ Blockdoku!\n\n` +
                         `üéØ –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${score}\n` +
                         `üèÜ –†–µ–∫–æ—Ä–¥: ${bestScore}\n\n` +
                         `–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–µ–≤–∑–æ–π—Ç–∏ –º–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!`;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if (this.tg.sendData) {
            this.tg.sendData(JSON.stringify({
                action: 'share_score',
                score: score,
                bestScore: bestScore,
                text: shareText
            }));
        }

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º popup —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        if (this.tg.showPopup) {
            this.tg.showPopup({
                title: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º',
                message: shareText,
                buttons: [
                    {
                        type: 'default',
                        text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç'
                    },
                    {
                        type: 'cancel',
                        text: '–û—Ç–º–µ–Ω–∞'
                    }
                ]
            }, (buttonId) => {
                if (buttonId === 'default') {
                    this.tg.switchInlineQuery(shareText, ['users', 'groups']);
                }
            });
        }
    }

    sendScore(score, bestScore) {
        if (!this.tg) return;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ –±–æ—Ç—É
        const gameData = {
            user_id: this.user?.id,
            username: this.user?.username,
            first_name: this.user?.first_name,
            score: score,
            best_score: bestScore,
            timestamp: Date.now()
        };

        if (this.tg.sendData) {
            this.tg.sendData(JSON.stringify(gameData));
        }
    }

    showAlert(message) {
        if (this.tg?.showAlert) {
            this.tg.showAlert(message);
        } else {
            alert(message);
        }
    }

    showConfirm(message, callback) {
        if (this.tg?.showConfirm) {
            this.tg.showConfirm(message, callback);
        } else {
            const result = confirm(message);
            callback(result);
        }
    }

    hapticFeedback(type = 'impact', style = 'medium') {
        if (this.tg?.HapticFeedback) {
            switch (type) {
                case 'impact':
                    this.tg.HapticFeedback.impactOccurred(style);
                    break;
                case 'notification':
                    this.tg.HapticFeedback.notificationOccurred(style);
                    break;
                case 'selection':
                    this.tg.HapticFeedback.selectionChanged();
                    break;
            }
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Telegram
    saveProgress(gameState) {
        if (!this.tg?.CloudStorage) return;

        const dataKey = `blockdoku_progress_${this.user?.id || 'guest'}`;
        const gameData = JSON.stringify({
            score: gameState.score,
            bestScore: gameState.bestScore,
            lastPlayed: Date.now(),
            board: gameState.board
        });

        this.tg.CloudStorage.setItem(dataKey, gameData, (error) => {
            if (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
            } else {
                console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –æ–±–ª–∞–∫–æ');
            }
        });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    loadProgress(callback) {
        if (!this.tg?.CloudStorage) {
            callback(null);
            return;
        }

        const dataKey = `blockdoku_progress_${this.user?.id || 'guest'}`;
        
        this.tg.CloudStorage.getItem(dataKey, (error, value) => {
            if (error || !value) {
                callback(null);
                return;
            }

            try {
                const gameData = JSON.parse(value);
                callback(gameData);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', e);
                callback(null);
            }
        });
    }
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∏–≥—Ä–æ–π
class GameTelegramIntegration {
    constructor() {
        this.telegram = new TelegramIntegration();
        this.initGameIntegration();
    }

    initGameIntegration() {
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã
        const checkGame = () => {
            if (window.game) {
                this.setupGameIntegration();
            } else {
                setTimeout(checkGame, 100);
            }
        };
        checkGame();
    }

    setupGameIntegration() {
        const originalGameOver = window.game.gameOver.bind(window.game);
        const originalPlacePiece = window.game.placePiece.bind(window.game);
        const originalClearCompletedLines = window.game.clearCompletedLines.bind(window.game);

        // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –∏–≥—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram
        window.game.gameOver = () => {
            originalGameOver();
            this.onGameOver();
        };

        window.game.placePiece = (...args) => {
            const result = originalPlacePiece(...args);
            if (result) {
                this.telegram.hapticFeedback('impact', 'light');
            }
            return result;
        };

        window.game.clearCompletedLines = () => {
            const oldScore = window.game.score;
            originalClearCompletedLines();
            const newScore = window.game.score;
            
            if (newScore > oldScore) {
                this.telegram.hapticFeedback('notification', 'success');
            }
        };

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        this.telegram.loadProgress((savedGame) => {
            if (savedGame && savedGame.bestScore > window.game.bestScore) {
                window.game.bestScore = savedGame.bestScore;
                window.game.updateScore();
                localStorage.setItem('blockdoku-best-score', savedGame.bestScore);
            }
        });
    }

    onGameOver() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞
        this.telegram.showMainButton();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        this.telegram.saveProgress({
            score: window.game.score,
            bestScore: window.game.bestScore,
            board: window.game.board
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.telegram.sendScore(window.game.score, window.game.bestScore);
        
        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã
        this.telegram.hapticFeedback('notification', 'error');
    }

    onNewGame() {
        // –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        this.telegram.hideMainButton();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
document.addEventListener('DOMContentLoaded', () => {
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram WebApp API
    setTimeout(() => {
        window.telegramIntegration = new GameTelegramIntegration();
    }, 100);
}); 